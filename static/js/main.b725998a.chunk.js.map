{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","length","name","localeCompare","reverse","getPreparedGoods","arr1","arr2","className","type","cn","onClick","every","el","i","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,iBAAAA,M,KAsCE,IAAME,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAhCR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,UAAWE,EACH,EADGA,WAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAASc,OACZ,OAAOF,EAAME,OAASD,EAAMC,OAE9B,KAAKd,EAASe,KACZ,OAAOH,EAAMI,cAAcH,GAE7B,QACE,OAAO,MAKXP,GACFI,EAAcO,UAGTP,EAOcQ,CAAiBjB,EAAiB,CACrDG,YACAE,eAOF,IAJyBa,EAAgBC,EAazC,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAcJ,EAASe,OAErCS,QAAS,kBAAMnB,EAAaL,EAASe,OALvC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAcJ,EAASc,SAErCU,QAAS,kBAAMnB,EAAaL,EAASc,SALvC,4BAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CAAE,YAAajB,IACrDkB,QA9Bc,WACpBjB,GAAeD,IA0BX,sBApCmBa,EA4CFX,EA5CkBY,EA4CJnB,GA3C3BkB,EAAKM,OAAM,SAACC,EAAIC,GAAL,OAAWD,IAAON,EAAKO,OA4CpC,wBACEL,KAAK,SACLD,UAAU,4BACVG,QA5CI,WACZnB,EAAa,IACbE,GAAc,IAuCR,uBAUJ,6BACGC,EAAaoB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCxHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b725998a.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  name = 'name',\n  length = 'length',\n}\n\ninterface FilterParams {\n  sortField: string;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversed }: FilterParams,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.length:\n          return good1.length - good2.length;\n\n        case SortType.name:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  function isOriginalOrder(arr1: string[], arr2: string[]) {\n    return !arr1.every((el, i) => el === arr2[i]);\n  }\n\n  const reset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  const toggleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.name,\n          })}\n          onClick={() => setSortField(SortType.name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.length,\n          })}\n          onClick={() => setSortField(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', { 'is-light': !isReversed })}\n          onClick={toggleReverse}\n        >\n          Reverse\n        </button>\n\n        {isOriginalOrder(visibleGoods, goodsFromServer) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}